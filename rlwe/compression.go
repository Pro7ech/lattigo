package rlwe

import (
	"bufio"
	"io"

	"github.com/Pro7ech/lattigo/utils/buffer"
	"github.com/Pro7ech/lattigo/utils/structs"
)

// CompressionInfos is a struct storing information to be able
// to reconstruct public random polynomial from a seed.
// [rlwe.Ciphertext] or [rlwe.GadgetCiphertext] with compression infos
// have a serialization size that is half of their usual size.
type CompressionInfos struct {
	Qi   structs.Vector[uint64]
	Pi   structs.Vector[uint64]
	Seed [32]byte
}

// BinarySize returns the serialized size of the object in bytes.
func (c CompressionInfos) BinarySize() (size int) {
	return c.Qi.BinarySize() + c.Pi.BinarySize() + 32
}

// WriteTo writes the object on an io.Writer. It implements the io.WriterTo
// interface, and will write exactly object.BinarySize() bytes on w.
//
// Unless w implements the buffer.Writer interface (see lattigo/utils/buffer/writer.go),
// it will be wrapped into a bufio.Writer. Since this requires allocations, it
// is preferable to pass a buffer.Writer directly:
//
//   - When writing multiple times to a io.Writer, it is preferable to first wrap the
//     io.Writer in a pre-allocated bufio.Writer.
//   - When writing to a pre-allocated var b []byte, it is preferable to pass
//     buffer.NewBuffer(b) as w (see lattigo/utils/buffer/buffer.go).
func (c CompressionInfos) WriteTo(w io.Writer) (n int64, err error) {

	switch w := w.(type) {
	case buffer.Writer:

		var inc int64

		if inc, err = c.Qi.WriteTo(w); err != nil {
			return n + inc, err
		}

		n += inc

		if inc, err = c.Pi.WriteTo(w); err != nil {
			return n + inc, err
		}

		n += inc

		if inc, err = buffer.Write(w, c.Seed[:]); err != nil {
			return n + inc, err
		}

		return n + inc, err

	default:
		return c.WriteTo(bufio.NewWriter(w))
	}
}

// ReadFrom reads on the object from an io.Writer. It implements the
// io.ReaderFrom interface.
//
// Unless r implements the buffer.Reader interface (see see lattigo/utils/buffer/reader.go),
// it will be wrapped into a bufio.Reader. Since this requires allocation, it
// is preferable to pass a buffer.Reader directly:
//
//   - When reading multiple values from a io.Reader, it is preferable to first
//     first wrap io.Reader in a pre-allocated bufio.Reader.
//   - When reading from a var b []byte, it is preferable to pass a buffer.NewBuffer(b)
//     as w (see lattigo/utils/buffer/buffer.go).
func (c *CompressionInfos) ReadFrom(r io.Reader) (n int64, err error) {
	switch r := r.(type) {
	case buffer.Reader:

		var inc int64

		if inc, err = c.Qi.ReadFrom(r); err != nil {
			return n + inc, err
		}

		n += inc

		if inc, err = c.Pi.ReadFrom(r); err != nil {
			return n + inc, err
		}

		n += inc

		if inc, err = buffer.Read(r, c.Seed[:]); err != nil {
			return n + inc, err
		}

		return n + inc, err

	default:
		return c.ReadFrom(bufio.NewReader(r))
	}
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (c CompressionInfos) MarshalBinary() (data []byte, err error) {
	buf := buffer.NewBufferSize(c.BinarySize())
	_, err = c.WriteTo(buf)
	return buf.Bytes(), err
}

// UnmarshalBinary decodes a slice of bytes generated by
// MarshalBinary or WriteTo on the object.
func (c *CompressionInfos) UnmarshalBinary(p []byte) (err error) {
	_, err = c.ReadFrom(buffer.NewBuffer(p))
	return
}
